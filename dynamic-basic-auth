swagger: '2.0'
info:
  title: dynamic-basic-auth
  x-ibm-name: dynamic-basic-auth
  version: 1.0.0
x-ibm-configuration:
  cors:
    enabled: true
  gateway: datapower-api-gateway
  type: rest
  phase: realized
  enforced: true
  testable: true
  assembly:
    execute:
      - gatewayscript:
          version: 2.0.0
          title: gwyscript-BasicAuth-Extraction
          source: "console.log('****Running-BasicAuth-Extraction****')\r\n\r\nconsole.log('****request.auth: ' + context.get('request.authorization'));\r\n\r\n\r\nvar vBasicAuth = context.get('request.authorization').split(' ')[1];\r\nvar vDecodedBasicAuth = Buffer.from(vBasicAuth, \"base64\").toString();\r\nconsole.log('****vBasicAuth: ' + vBasicAuth);\r\nconsole.debug('****decoded.auth: ' + vDecodedBasicAuth);\r\n\r\ncontext.set('username', vDecodedBasicAuth.split(':')[0]);\r\ncontext.set('password', vDecodedBasicAuth.split(':')[1]);\r\n\r\nconsole.log('****msg.hdr.authorization: ' + context.get('message.headers.authorization'));\r\nconsole.debug('****username.set: ' + vDecodedBasicAuth.split(':')[0]);\r\nconsole.debug('****password.set: ' + vDecodedBasicAuth.split(':')[1]);\r\n"
          description: >-
            This gatewayscript takes the incoming http basic authorization
            header, base64 decodes, and sets the username and password to be
            used downstream.

            Normally, APIC will terminate the http authorization header before
            it gets to the api policies flow. 

            Developers may still obtain it by getting the context variable
            "request.authorization".
      - invoke:
          version: 2.2.0
          title: invoke
          backend-type: detect
          header-control:
            type: blocklist
            values: []
          parameter-control:
            type: allowlist
            values: []
          http-version: HTTP/1.1
          timeout: 60
          verb: keep
          chunked-uploads: true
          persistent-connection: true
          cache-response: no-cache
          cache-ttl: 900
          stop-on-error: []
          graphql-send-type: detect
          websocket-upgrade: false
          username: $(username)
          password: $(password)
          target-url: $(target-url)
          tls-profile: ''
    finally: []
  properties:
    target-url:
      value: http://example.com/operation-name
      description: The URL of the target service
      encoded: false
  activity-log:
    enabled: true
    success-content: activity
    error-content: payload
basePath: /dynamic-basic-auth
paths:
  /:
    get:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    put:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    post:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    delete:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    head:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    patch:
      responses:
        '200':
          description: success
          schema:
            type: string
      consumes: []
      produces: []
    parameters:
      - name: authorization
        required: true
        in: header
        type: string
schemes:
  - https
